define(function (require, exports, module) {
function Uploader(t) { if (!(this instanceof Uploader)) return new Uploader(t); isString(t) && (t = { trigger: t }); var e = { trigger: null, name: null, action: null, data: null, accept: null, change: null, error: null, multiple: !0, success: null }; t && $.extend(e, t); var r = $(e.trigger); e.action = e.action || r.data("action") || "/upload", e.name = e.name || r.attr("name") || r.data("name") || "file", e.data = e.data || parse(r.data("data")), e.accept = e.accept || r.data("accept"), e.success = e.success || r.data("success"), this.settings = e, this.setup(), this.bind() } function isString(t) { return "[object String]" === Object.prototype.toString.call(t) } function createInputs(t) { if (!t) return []; var e, r = []; for (var i in t) e = document.createElement("input"), e.type = "hidden", e.name = i, e.value = t[i], r.push(e); return r } function parse(t) { if (!t) return {}; for (var e = {}, r = t.split("&"), i = function (t) { return decodeURIComponent(t.replace(/\+/g, " ")) }, n = 0; n < r.length; n++) { var s = r[n].split("="), a = i(s[0]), o = i(s[1]); e[a] = o } return e } function findzIndex(t) { for (var e = t.parentsUntil("body"), r = 0, i = 0; i < e.length; i++) { var n = e.eq(i); "static" !== n.css("position") && (r = parseInt(n.css("zIndex"), 10) || r) } return r } function newIframe() { var t = "iframe-uploader-" + iframeCount, e = $('<iframe name="' + t + '" />').hide(); return iframeCount += 1, e } function MultipleUploader(t) { if (!(this instanceof MultipleUploader)) return new MultipleUploader(t); isString(t) && (t = { trigger: t }); var e = $(t.trigger), r = []; e.each(function (e, i) { t.trigger = i, r.push(new Uploader(t)) }), this._uploaders = r } var iframeCount = 0; Uploader.prototype.setup = function () { this.form = $('<form method="post" enctype="multipart/form-data"target="" action="' + this.settings.action + '" />'), this.iframe = newIframe(), this.form.attr("target", this.iframe.attr("name")); var t = this.settings.data; this.form.append(createInputs(t)), window.FormData ? this.form.append(createInputs({ _uploader_: "formdata" })) : this.form.append(createInputs({ _uploader_: "iframe" })); var e = document.createElement("input"); e.type = "file", e.name = this.settings.name, this.settings.accept && (e.accept = this.settings.accept), this.settings.multiple && (e.multiple = !0, e.setAttribute("multiple", "multiple")), this.input = $(e); var r = $(this.settings.trigger); return this.input.attr("hidefocus", !0).css({ position: "absolute", top: 0, right: 0, opacity: 0.1, outline: 0, cursor: "pointer", height: r.outerHeight(), fontSize: Math.max(64, 5 * r.outerHeight()) }), this.form.append(this.input), this.form.css({opacity: 0, position: "absolute", top: 0, left: 0, overflow: "hidden", width: r.outerWidth(), height: r.outerHeight(), zIndex: findzIndex(r) + 10 }).appendTo(r), this }, Uploader.prototype.bind = function () { var t = this, e = $(t.settings.trigger); e.mouseenter(function () { t.form.css({ top: 0, left: 0, width: e.outerWidth(), height: e.outerHeight() }) }), t.bindInput() }, Uploader.prototype.bindInput = function () { var t = this; t.input.change(function (e) { t._files = this.files || [{ name: e.target.value }]; var r = t.input.val(); if (t.settings.change) t.settings.change.call(t, t._files); else if (r) return t.submit() }) }, Uploader.prototype.submit = function () { var t = this; if (window.FormData && t._files) { var e = new FormData(t.form.get(0)); e.append(t.settings.name, t._files); var r; if (t.settings.progress) { var i = t._files; r = function () { var e = $.ajaxSettings.xhr(); return e.upload && e.upload.addEventListener("progress", function (e) { var r = 0, n = e.loaded || e.position, s = e.total; e.lengthComputable && (r = Math.ceil(n / s * 100)), t.settings.progress(e, n, s, r, i) }, !1), e } } return $.ajax({ url: t.settings.action, type: "post", processData: !1, contentType: !1, data: e, dataType: "html", xhr: r, context: this, success: t.settings.success, error: t.settings.error }), this } return t.iframe = newIframe(), t.form.attr("target", t.iframe.attr("name")), $("body").append(t.iframe), t.iframe.one("load", function () { $('<iframe src="javascript:false;"></iframe>').appendTo(t.form).remove(); var e = $(this).contents().find("body").html(); $(this).remove(), e ? t.settings.success && t.settings.success(e) : t.settings.error && t.settings.error(t.input.val()) }), t.form.submit(), this }, Uploader.prototype.refreshInput = function () { var t = this.input.clone(); this.input.before(t), this.input.off("change"), this.input.remove(), this.input = t, this.bindInput() }, Uploader.prototype.change = function (t) { return t ? (this.settings.change = t, this) : this }, Uploader.prototype.success = function (t) { var e = this; return this.settings.success = function (r) { e.refreshInput(), t && t(r) }, this }, Uploader.prototype.error = function (t) { var e = this; return this.settings.error = function (r) { t && (e.refreshInput(), t(r)) }, this }, Uploader.prototype.enable = function () { this.input.prop("disabled", !1) }, Uploader.prototype.disable = function () { this.input.prop("disabled", !0) }, MultipleUploader.prototype.submit = function () { return $.each(this._uploaders, function (t, e) { e.submit() }), this }, MultipleUploader.prototype.change = function (t) { return $.each(this._uploaders, function (e, r) { r.change(t) }), this }, MultipleUploader.prototype.success = function (t) { return $.each(this._uploaders, function (e, r) { r.success(t) }), this }, MultipleUploader.prototype.error = function (t) { return $.each(this._uploaders, function (e, r) { r.error(t) }), this }, MultipleUploader.prototype.enable = function () { return $.each(this._uploaders, function (t, e) { e.enable() }), this }, MultipleUploader.prototype.disable = function () { return $.each(this._uploaders, function (t, e) { e.disable() }), this }, MultipleUploader.Uploader = Uploader, module.exports = MultipleUploader;    });
